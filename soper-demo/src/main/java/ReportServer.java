/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-18")
public class ReportServer {

    public interface Iface {
        public void reportJobDone(String report) throws TException;
    }

    public interface AsyncIface {
        public void reportJobDone(String report, AsyncMethodCallback resultHandler) throws TException;
    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void reportJobDone(String report) throws TException {
            send_reportJobDone(report);
        }

        public void send_reportJobDone(String report) throws TException {
            reportJobDone_args args = new reportJobDone_args();
            args.setReport(report);
            sendBaseOneway("reportJobDone", args);
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void reportJobDone(String report, AsyncMethodCallback resultHandler) throws TException {
            checkReady();
            reportJobDone_call method_call = new reportJobDone_call(report, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class reportJobDone_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String report;

            public reportJobDone_call(String report, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.report = report;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportJobDone", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                reportJobDone_args args = new reportJobDone_args();
                args.setReport(report);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("reportJobDone", new reportJobDone());
            return processMap;
        }

        public static class reportJobDone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportJobDone_args> {
            public reportJobDone() {
                super("reportJobDone");
            }

            public reportJobDone_args getEmptyArgsInstance() {
                return new reportJobDone_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, reportJobDone_args args) throws TException {
                iface.reportJobDone(args.report);
                return null;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("reportJobDone", new reportJobDone());
            return processMap;
        }

        public static class reportJobDone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportJobDone_args, Void> {
            public reportJobDone() {
                super("reportJobDone");
            }

            public reportJobDone_args getEmptyArgsInstance() {
                return new reportJobDone_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }

                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, reportJobDone_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.reportJobDone(args.report, resultHandler);
            }
        }

    }

    public static class reportJobDone_args implements org.apache.thrift.TBase<reportJobDone_args, reportJobDone_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportJobDone_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportJobDone_args");

        private static final org.apache.thrift.protocol.TField REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("report", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new reportJobDone_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new reportJobDone_argsTupleSchemeFactory());
        }

        public String report; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            REPORT((short) 1, "report");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // REPORT
                        return REPORT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REPORT, new org.apache.thrift.meta_data.FieldMetaData("report", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                     new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)
            ));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportJobDone_args.class, metaDataMap);
        }

        public reportJobDone_args() {
        }

        public reportJobDone_args(
                String report) {
            this();
            this.report = report;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reportJobDone_args(reportJobDone_args other) {
            if (other.isSetReport()) {
                this.report = other.report;
            }
        }

        public reportJobDone_args deepCopy() {
            return new reportJobDone_args(this);
        }

        public void clear() {
            this.report = null;
        }

        public String getReport() {
            return this.report;
        }

        public reportJobDone_args setReport(String report) {
            this.report = report;
            return this;
        }

        public void unsetReport() {
            this.report = null;
        }

        /**
         * Returns true if field report is set (has been assigned a value) and false otherwise
         */
        public boolean isSetReport() {
            return this.report != null;
        }

        public void setReportIsSet(boolean value) {
            if (!value) {
                this.report = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case REPORT:
                    if (value == null) {
                        unsetReport();
                    } else {
                        setReport((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case REPORT:
                    return getReport();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case REPORT:
                    return isSetReport();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reportJobDone_args)
                return this.equals((reportJobDone_args) that);
            return false;
        }

        public boolean equals(reportJobDone_args that) {
            if (that == null)
                return false;

            boolean this_present_report = true && this.isSetReport();
            boolean that_present_report = true && that.isSetReport();
            if (this_present_report || that_present_report) {
                if (!(this_present_report && that_present_report))
                    return false;
                if (!this.report.equals(that.report))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_report = true && (isSetReport());
            list.add(present_report);
            if (present_report)
                list.add(report);

            return list.hashCode();
        }

        public int compareTo(reportJobDone_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetReport()).compareTo(other.isSetReport());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReport()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report, other.report);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reportJobDone_args(");
            boolean first = true;

            sb.append("report:");
            if (this.report == null) {
                sb.append("null");
            } else {
                sb.append(this.report);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class reportJobDone_argsStandardSchemeFactory implements SchemeFactory {
            public reportJobDone_argsStandardScheme getScheme() {
                return new reportJobDone_argsStandardScheme();
            }
        }

        private static class reportJobDone_argsStandardScheme extends StandardScheme<reportJobDone_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reportJobDone_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // REPORT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.report = iprot.readString();
                                struct.setReportIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reportJobDone_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.report != null) {
                    oprot.writeFieldBegin(REPORT_FIELD_DESC);
                    oprot.writeString(struct.report);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reportJobDone_argsTupleSchemeFactory implements SchemeFactory {
            public reportJobDone_argsTupleScheme getScheme() {
                return new reportJobDone_argsTupleScheme();
            }
        }

        private static class reportJobDone_argsTupleScheme extends TupleScheme<reportJobDone_args> {

            public void write(org.apache.thrift.protocol.TProtocol prot, reportJobDone_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetReport()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetReport()) {
                    oprot.writeString(struct.report);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot, reportJobDone_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.report = iprot.readString();
                    struct.setReportIsSet(true);
                }
            }
        }

    }

}
